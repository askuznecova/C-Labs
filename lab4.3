#include <iostream>
#include <cmath>
#include <vector>

using namespace std;

// Функция для вычисления нормы разности двух векторов
double vectorNorm(const vector<double>& v1, const vector<double>& v2) {
    double norm = 0.0;
    for (size_t i = 0; i < v1.size(); ++i) {
        norm += pow(v1[i] - v2[i], 2);
    }
    return sqrt(norm);
}

// Функция для решения системы линейных уравнений методом Зейделя
vector<double> solveUsingSeidel(const vector<vector<double>>& A, const vector<double>& b, double tolerance) {
    int n = A.size();
    vector<double> x(n, 0.0); // Начальное приближение
    vector<double> x_prev(n, 0.0); // Предыдущее значение x
    double error = tolerance + 1.0; // Начальная ошибка больше заданной точности

    while (error > tolerance) {
        x_prev = x;
        for (int i = 0; i < n; ++i) {
            double sum = 0.0;
            for (int j = 0; j < n; ++j) {
                if (j != i) {
                    sum += A[i][j] * x[j];
                }
            }
            x[i] = (b[i] - sum) / A[i][i];
        }
        error = vectorNorm(x, x_prev); // Вычисляем норму разности
    }

    return x;
}

int main() {
    // Инициализация матрицы коэффициентов A и вектора правой части b
    vector<vector<double>> A = {
        {23, -7, 5, 2},
        {-7, -21, 4, 9},
        {9, 5, -31, -8},
        {0, 1, -2, 10}
    };

    vector<double> b = {-26, -55, -58, -24};

    // Решение системы методом Зейделя с точностью до 0.01
    vector<double> solution = solveUsingSeidel(A, b, 0.01);

    // Вывод результатов
    cout << "Решение системы методом Зейделя:" << endl;
    for (size_t i = 0; i < solution.size(); ++i) {
        cout << "x" << i + 1 << " = " << solution[i] << endl;
    }

    return 0;
}
